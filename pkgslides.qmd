% Generated by pkgslides: do not edit by hand
---
title: pkgslides
subtitle: 0.1.0
format:
  revealjs:
    navigation-mode: vertical
    self-contained: true
---

## Automatically Generate Presentations for Source Code

::: {.r-fit-text}

When pointed at the root directory of an R Package Project, this 
  function will automatically generate and render a Quarto/Revealjs 
  presentation for that package. It will have a title slide and description 
  slide generated from the package's DESCRIPTION file and each exported 
  function will have slides with its description and returns, parameters, 
  examples, and source code.

:::

```{r}
#| echo: false
library(pkgslides)
```

# Parse `_pkgslides.yml`

::: {.r-fit-text}

- **Topic:** `.parse_yaml`

- **Return:** A list

:::


## Parameters

::: {.r-fit-text}

- `package`: A file path to the root directory of an R package source
folder.

:::


## `yaml.R`

::: {.r-fit-text}

```{.r}
.parse_yaml <- function(package) {
    file <- glue::glue("{package}/_pkgslides.yml")
    if (file.exists(file)) {
        yaml <- yaml::read_yaml(file)
    }
    else {
        yaml <- NULL
    }
    return(yaml)
}
```

:::

# Title

::: {.r-fit-text}

- **Topic:** `.get_title`

- **Return:** A list of roxygen2 properties for the package's DESCRIPTION file used
  to create the title slide

:::


## Parameters

::: {.r-fit-text}



:::


## `build_title.R`

::: {.r-fit-text}

```{.r}
.get_title <- function(package) {
    lib <- .get_desc(package, "Package")
    version <- .get_desc(package, "Version")
    list(lib = lib, version = version)
}
```

:::

# Create a Revealjs Presentation with Quarto

::: {.r-fit-text}

- **Topic:** `create_presentation`

- **Description:** When pointed at the root directory of an R Package Project, this
  function will automatically generate and render a Quarto/Revealjs
  presentation for that package. It will have a title slide and description
  slide generated from the package's DESCRIPTION file and each exported
  function will have slides with its description and returns, parameters,
  examples, and source code.

- **Return:** This function creates and renders a .qmd presentation but does not
  return an R object.

:::


## Parameters

::: {.r-fit-text}

- `package`: A file path to the root directory of an R package source
folder.
- `file`: The file name for your .qmd file. This can be a path so long as
it ends with a `file_name.qmd`

:::


## `create_presentation.R`

::: {.r-fit-text}

```{.r}
create_presentation <- function(package = getwd(), file = "") {
    if (file == "") {
        package_name <- .get_file_from_path(package)
        file <- package_name
    }
    if (grepl("\\.qmd$", file)) {
        file.create(file)
    }
    else {
        file <- paste0(file, ".qmd")
        file.create(file)
    }
    title_contents <- .collate_title(.get_title(package))
    package_contents <- .collate_description(.get_description(package))
    r_files <- paste0(package, "/R")
    package_functions <- list.files(r_files, pattern = "\\.R$")
    function_contents <- .get_functions(package)
    file_contents <- c(title_contents, package_contents, function_contents)
    fileConn <- file(file)
    writeLines(file_contents, fileConn)
    close(fileConn)
    quarto::quarto_render(file)
}
```

:::
