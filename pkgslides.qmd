% Generated by pkgslides: do not edit by hand
---
title: pkgslides
subtitle: 0.1.0
format:
  revealjs:
    navigation-mode: vertical
    self-contained: true
---

## Automatically Generate Presentations for Source Code
When pointed at the root directory of an R Package Project, this 
  function will automatically generate and render a Quarto/Revealjs 
  presentation for that package. It will have a title slide and description 
  slide generated from the package's DESCRIPTION file and each exported 
  function will have slides with its description and returns, parameters, 
  examples, and source code.

```{r}
#| echo: false
library(pkgslides)
```

# Title
- **Return**: A list of roxygen2 properties for the package's DESCRIPTION file used
  to create the package description slide


## Parameters



## `build_description.R`
```{.r}
.get_description <- function(package) {
    lib <- .get_desc(package, "Package")
    title <- .get_desc(package, "Title")
    description <- .get_desc(package, "Description")
    list(lib = lib, title = title, description = description)
}
```

# Title
- **Return**: A character vector of properties formatted for writing to a file


## Parameters
- `file`: A file path


## `build_functions.R`
```{.r}
.get_functions <- function(file) {
    f <- roxygen2::parse_file(file)
    function_contents <- .collate_functions(.get_tag_list(f[[1]]))
    return(function_contents)
}
```

# Title
- **Return**: A list of roxygen2 properties for the package's DESCRIPTION file used
  to create the title slide


## Parameters



## `build_title.R`
```{.r}
.get_title <- function(package) {
    lib <- .get_desc(package, "Package")
    version <- .get_desc(package, "Version")
    list(lib = lib, version = version)
}
```

# Create a Revealjs Presentation with Quarto
- **Description**: When pointed at the root directory of an R Package Project, this
  function will automatically generate and render a Quarto/Revealjs
  presentation for that package. It will have a title slide and description
  slide generated from the package's DESCRIPTION file and each exported
  function will have slides with its description and returns, parameters,
  examples, and source code.
- **Return**: This function creates and renders a .qmd presentation but does not
  return an R object.


## Parameters
- `package`: A file path to the root directory of an R package source
folder.
- `file`: The file name for your .qmd file. This can be a path so long as
it ends with a `file_name.qmd`


## `create_presentation.R`
```{.r}
create_presentation <- function(package, file = "") {
    if (file == "") {
        package_name <- rev(strsplit(package, "/")[[1]])[1]
        file <- package_name
    }
    if (grepl("\\.qmd$", file)) {
        file.create(file)
    }
    else {
        file <- paste0(file, ".qmd")
        file.create(file)
    }
    title_contents <- .collate_title(.get_title(package))
    package_contents <- .collate_description(.get_description(package))
    r_files <- paste0(package, "/R")
    package_functions <- list.files(r_files, pattern = "\\.R$")
    function_contents <- unlist(lapply(paste0(r_files, "/", package_functions), 
        .get_functions))
    file_contents <- c(title_contents, package_contents, function_contents)
    fileConn <- file(file)
    writeLines(file_contents, fileConn)
    close(fileConn)
    quarto::quarto_render(file)
}
```

# Title
- **Return**: A length-one character vector with the desired text from a package's
  DESCRIPTION file


## Parameters
- `package`: A file path to the root directory of an R package source
folder.
- `tag`: The name of the tag whose contents are desired


## `misc.R`
```{.r}
.get_desc <- function(package, tag) {
    desc::desc_get(tag, glue::glue("{package}/DESCRIPTION"))
}
```
